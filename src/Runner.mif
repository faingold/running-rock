-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 2805;  -- 	JUMP   Init        ; Reset vector
           001 : B000;  -- 	RETI               ; Sonar interrupt (unused)
           002 : 28D7;  -- 	JUMP   CTimer_ISR  ; Timer interrupt
           003 : B000;  -- 	RETI               ; UART interrupt (unused)
           004 : B000;  -- 	RETI               ; Motor stall interrupt (unused)
           005 : 0A5F;  -- 	LOAD   Zero
           006 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           007 : 988B;  -- 	OUT    RVELCMD
           008 : 10DA;  -- 	STORE  DVel        ; Reset API variables
           009 : 10D9;  -- 	STORE  DTheta
           00A : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           00B : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           00C : 8240;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           00D : 8222;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           00E : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           00F : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           010 : 4A72;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           011 : 3817;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           012 : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           013 : 4A6F;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           014 : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           015 : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           016 : 280F;  -- 	JUMP   WaitForSafety
           017 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           018 : 4A6F;  -- 	AND    Mask1
           019 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           01A : 1256;  -- 	STORE  Temp        ; (overkill, but looks nice)
           01B : 6001;  -- 	SHIFT  1
           01C : 5256;  -- 	OR     Temp
           01D : 9807;  -- 	OUT    XLEDS
           01E : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           01F : 4A70;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           020 : 3817;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           021 : 0A5F;  -- 	LOAD   Zero
           022 : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           023 : 98C3;  -- 	OUT    RESETPOS    ; reset the odometry to 0,0,0
           024 : B80A;  -- 	LOADI  10          ; period = (10 ms * 10) = 0.1s, or 10Hz.
           025 : 980C;  -- 	OUT    CTIMER      ; turn on timer peripheral
           026 : A802;  -- 	SEI    &B0010      ; enable interrupts from source 2 (timer)
           027 : B82D;  -- 	LOADI 	&b00101101
           028 : 98B2;  -- 	OUT 	SONAREN     	; Enable Sonars
           029 : B800;  -- 	LOADI 	&b00000000
           02A : 98B1;  -- 	OUT 	SONARINT		; Disable Interrupts
           02B : BABC;  -- 	LOADI	700
           02C : 98B0;  -- 	OUT		SONALARM		; Set threshold distance of forward sensors for wall turn 
           02D : 0A5F;  -- 	LOAD	Zero
           02E : 1256;  -- 	STORE	Temp			; Temp is the target angle. Set it to 0
           02F : 0A6A;  -- 	LOAD	BlueF
           030 : 125B;  -- 	STORE	Leg				; Set leg to blue forward
           031 : BAA8;  -- 	LOADI	680
           032 : 1259;  -- 	STORE	Thresh			; Set wall distance threshold
           033 : 821C;  -- 	CALL	Wait1			; Wait for everything to initialize		
           034 : 80BC;  -- 	CALL	Align
           035 : 80CE;  -- 	CALL	Die
           036 : 0A56;  -- 	LOAD	Temp			; Load target angle
           037 : 10D9;  -- 	STORE 	DTheta			; Update target direction
           038 : 0A86;  -- 	LOAD   	FFast			; Load fast forward speed value
           039 : 10DA;  -- 	STORE  	DVel         	; Use API to move forward
           03A : 0A5B;  -- 	LOAD	Leg
           03B : 9806;  -- 	OUT		LCD				; Display current leg for debug
           03C : 90B0;  -- 	IN		SONALARM		; Read sonar alarm data
           03D : 4A78;  -- 	AND		Mask23			; Mask to only get values of 2 forward sensors
           03E : 3840;  -- 	JPOS	Wall			; Execute turn routine if wall ahead
           03F : 2841;  -- 	JUMP	NoWall			; Don't do anything if there is no wall
           040 : 808E;  -- 	CALL	Turn
           041 : 8074;  -- 	CALL	ReadSonar
           042 : 8044;  -- 	CALL	AdjustHeading
           043 : 2834;  -- 	JUMP 	ActionLoop
           044 : 0A5B;  -- 	LOAD	Leg				; Determine in which direction to adjust based on current leg
           045 : 226A;  -- 	SUB		BlueF
           046 : 404B;  -- 	JZERO	Forward
           047 : 1A6A;  -- 	ADD 	BlueF
           048 : 226C;  -- 	SUB		WhiteF
           049 : 404B;  -- 	JZERO	Forward
           04A : 2852;  -- 	JUMP	Back	
           04B : 0A5D;  -- 	LOAD	SonarVal
           04C : 2259;  -- 	SUB		Thresh
           04D : 6FEC;  -- 	ADDI	-20				; Offset to create a corridor
           04E : 3859;  -- 	JPOS	CorrectRight	; Wall is too far
           04F : 6828;  -- 	ADDI	40				; Offset to create a corridor
           050 : 3064;  -- 	JNEG	CorrectLeft		; Wall is too close
           051 : 286F;  -- 	JUMP	CorrectStraight ; Wall is just right
           052 : 0A5D;  -- 	LOAD	SonarVal
           053 : 2259;  -- 	SUB		Thresh
           054 : 6FEC;  -- 	ADDI	-20				; Offset to create a corridor
           055 : 3864;  -- 	JPOS	CorrectLeft		; Wall is too far
           056 : 6828;  -- 	ADDI	40				; Offset to create a corridor
           057 : 3059;  -- 	JNEG	CorrectRight	; Wall is too close
           058 : 286F;  -- 	JUMP	CorrectStraight ; Wall is just right
           059 : 0A56;  -- 	LOAD	TEMP
           05A : 385F;  -- 	JPOS	BeginRight		; If first time turning right, do regular adjustment. If not, do aggressive adjustment
           05B : 9002;  -- 	IN		TIMER
           05C : 6FEE;  -- 	ADDI	-18				; Check if time limit has elapsed
           05D : 3862;  -- 	JPOS	AggresiveRight
           05E : 2860;  -- 	JUMP	RegularRight
           05F : 9802;  -- 	OUT		TIMER
           060 : BFFD;  -- 	LOADI	-3
           061 : 2871;  -- 	JUMP	Adjusted
           062 : BFF4;  -- 	LOADI	-12
           063 : 2871;  -- 	JUMP	Adjusted
           064 : 0A56;  -- 	LOAD	TEMP
           065 : 306A;  -- 	JNEG	BeginLeft		; If first time turning left, do regular adjustment. If not, do aggressive adjustment
           066 : 9002;  -- 	IN		TIMER
           067 : 6FEE;  -- 	ADDI	-18				; Check if time limit has elapsed
           068 : 386D;  -- 	JPOS	AggresiveLeft
           069 : 286B;  -- 	JUMP	RegularLeft
           06A : 9802;  -- 	OUT		TIMER
           06B : B803;  -- 	LOADI	3
           06C : 2871;  -- 	JUMP	Adjusted
           06D : B80C;  -- 	LOADI	12
           06E : 2871;  -- 	JUMP	Adjusted
           06F : 0A5F;  -- 	LOAD	Zero
           070 : 2871;  -- 	JUMP	Adjusted
           071 : 9804;  -- 	OUT 	SSEG1
           072 : 1256;  -- 	STORE	TEMP
           073 : 8800;  -- 	RETURN
           074 : 0A5B;  -- 	LOAD	Leg				; Determine which sonar to read based on current leg
           075 : 226A;  -- 	SUB		BlueF
           076 : 407E;  -- 	JZERO	ReadR
           077 : 1A6A;  -- 	ADD 	BlueF
           078 : 226C;  -- 	SUB		WhiteF
           079 : 407E;  -- 	JZERO	ReadR
           07A : 287B;  -- 	JUMP	ReadL
           07B : 90A8;  -- 	IN		DIST0
           07C : 125D;  -- 	STORE	SonarVal
           07D : 8800;  -- 	RETURN
           07E : 90AD;  -- 	IN		DIST5
           07F : 125D;  -- 	STORE	SonarVal
           080 : 8800;  -- 	RETURN
           081 : 0A5D;  -- 	LOAD 	SonarVal
           082 : 6CE0;  -- 	ADDI	-800
           083 : 308C;  -- 	JNEG	GoodValue
           084 : 0A82;  -- 	LOAD	FSlow
           085 : 10DA;  -- 	STORE	DVel
           086 : B805;  -- 	LOADI	5
           087 : 10D9;  -- 	STORE	DTheta
           088 : 821C;  -- 	CALL	Wait1
           089 : 821C;  -- 	CALL	Wait1			; Turn and wait for 2 sec. Hope it turned
           08A : 98C3;  -- 	OUT     RESETPOS    	; reset the odometry to 0,0,0		
           08B : 8800;  -- 	RETURN
           08C : 6B20;  -- 	ADDI	800
           08D : 8800;  -- 	RETURN
           08E : 0A82;  -- 	LOAD	FSlow			; Turn at slow speed for higher accuracy 
           08F : 10DA;  -- 	STORE	DVel
           090 : 0A5B;  -- 	LOAD	Leg
           091 : 226A;  -- 	SUB		BlueF
           092 : 409A;  -- 	JZERO	LegBF
           093 : 1A6A;  -- 	ADD 	BlueF
           094 : 226C;  -- 	SUB		WhiteF
           095 : 40A1;  -- 	JZERO	LegWF
           096 : 1A6C;  -- 	ADD 	WhiteF
           097 : 226D;  -- 	SUB		WhiteB
           098 : 40A8;  -- 	JZERO	LegWB
           099 : 28AF;  -- 	JUMP	LegBB			; Decide which leg we are currently on
           09A : B8FA;  -- 	LOADI	250
           09B : 1259;  -- 	STORE 	Thresh			; Update Threshold
           09C : 0A6C;  -- 	LOAD	WhiteF
           09D : 125B;  -- 	STORE 	Leg				; Update current leg
           09E : B85A;  -- 	LOADI	90
           09F : 10D9;  -- 	STORE	DTheta			; Turn
           0A0 : 28B6;  -- 	JUMP	Turned
           0A1 : B8FA;  -- 	LOADI	250
           0A2 : 1259;  -- 	STORE 	Thresh			; Update Threshold
           0A3 : 0A6D;  -- 	LOAD	WhiteB
           0A4 : 125B;  -- 	STORE 	Leg				; Update current leg
           0A5 : B8B4;  -- 	LOADI	180
           0A6 : 10D9;  -- 	STORE	DTheta			; Turn
           0A7 : 28B6;  -- 	JUMP	Turned
           0A8 : BAA8;  -- 	LOADI	680
           0A9 : 1259;  -- 	STORE 	Thresh			; Update Threshold
           0AA : 0A6B;  -- 	LOAD	BlueB
           0AB : 125B;  -- 	STORE 	Leg				; Update current leg
           0AC : BFA6;  -- 	LOADI	-90
           0AD : 10D9;  -- 	STORE	DTheta			; Turn
           0AE : 28B6;  -- 	JUMP	Turned
           0AF : BAA8;  -- 	LOADI	680
           0B0 : 1259;  -- 	STORE 	Thresh			; Update Threshold
           0B1 : 0A6A;  -- 	LOAD	BlueF
           0B2 : 125B;  -- 	STORE 	Leg				; Update current leg
           0B3 : B8B4;  -- 	LOADI	180
           0B4 : 10D9;  -- 	STORE	DTheta			; Turn
           0B5 : 28B6;  -- 	JUMP	Turned
           0B6 : 821C;  -- 	CALL	Wait1
           0B7 : 821C;  -- 	CALL	Wait1			; Wait for 2 sec. Hope it turned
           0B8 : 0A5F;  -- 	LOAD	Zero
           0B9 : 10D9;  -- 	STORE	DTheta			; Head straight
           0BA : 98C3;  -- 	OUT    	RESETPOS		; Reset odometry
           0BB : 8800;  -- 	RETURN
           0BC : 8074;  -- 	CALL	ReadSonar
           0BD : 125C;  -- 	STORE	PrevDist		; Read and store previous sensor distance
           0BE : 80C5;  -- 	CALL	RotateL10ms
           0BF : 8074;  -- 	CALL	ReadSonar
           0C0 : 9805;  -- 	OUT		SSEG2
           0C1 : 225C;  -- 	SUB		PrevDist
           0C2 : 6FFD;  -- 	ADDI	-3				; Threshold value 
           0C3 : 30BC;  -- 	JNEG	Align			; Continue aligning if we didn't didn't get a larger (+3) value
           0C4 : 8800;  -- 	RETURN
           0C5 : 9802;  -- 	OUT 	Timer
           0C6 : 0A82;  -- 	LOAD	FSlow			
           0C7 : 988B;  -- 	OUT		RVELCMD
           0C8 : 0A83;  -- 	LOAD	RSlow
           0C9 : 9883;  -- 	OUT		LVELCMD			; Write slow speed to motors
           0CA : 9002;  -- 	IN 		TIMER					
           0CB : 6FFF;  -- 	ADDI 	-1				
           0CC : 30C6;  -- 	JNEG	RotateLoop		; Check if 10 ms elapsed
           0CD : 8800;  -- 	RETURN
           0CE : A00F;  -- 	CLI    &B1111      ; disable all interrupts
           0CF : 0A5F;  -- 	LOAD   Zero        ; Stop everything.
           0D0 : 9883;  -- 	OUT    LVELCMD
           0D1 : 988B;  -- 	OUT    RVELCMD
           0D2 : 98B2;  -- 	OUT    SONAREN
           0D3 : 08D6;  -- 	LOAD   DEAD        ; An indication that we are dead
           0D4 : 9805;  -- 	OUT    SSEG2       ; "dEAd" on the sseg
           0D5 : 28D5;  -- 	JUMP   Forever     ; Do this forever.
           0D6 : DEAD;  -- 	DEAD:  DW &HDEAD   ; Example of a "local" variable
           0D7 : 80DB;  -- 	CALL   ControlMovement
           0D8 : B000;  -- 	RETI   ; return from ISR
           0D9 : 0000;  -- DTheta:    DW 0
           0DA : 0000;  -- DVel:      DW 0
           0DB : B832;  -- 	LOADI  50          ; used for the CapValue subroutine
           0DC : 111B;  -- 	STORE  MaxVal
           0DD : 8108;  -- 	CALL   GetThetaErr ; get the heading error
           0DE : 6002;  -- 	SHIFT  2
           0DF : 1105;  -- 	STORE  CMAErr      ; hold temporarily
           0E0 : 6002;  -- 	SHIFT  2           ; multiply by another 4
           0E1 : 810F;  -- 	CALL   CapValue    ; get a +/- max of 50
           0E2 : 1905;  -- 	ADD    CMAErr
           0E3 : 1105;  -- 	STORE  CMAErr      ; now contains a desired differential
           0E4 : B9FE;  -- 	LOADI  510
           0E5 : 111B;  -- 	STORE  MaxVal
           0E6 : 08DA;  -- 	LOAD   DVel
           0E7 : 810F;  -- 	CALL   CapValue    ; ensure velocity is valid
           0E8 : 10DA;  -- 	STORE  DVel        ; overwrite any invalid input
           0E9 : 1905;  -- 	ADD    CMAErr
           0EA : 810F;  -- 	CALL   CapValue    ; ensure velocity is valid
           0EB : 1107;  -- 	STORE  CMAR
           0EC : 0905;  -- 	LOAD   CMAErr
           0ED : 8123;  -- 	CALL   Neg         ; left wheel gets negative differential
           0EE : 18DA;  -- 	ADD    DVel
           0EF : 810F;  -- 	CALL   CapValue
           0F0 : 1106;  -- 	STORE  CMAL
           0F1 : 0905;  -- 	LOAD   CMAErr
           0F2 : 6001;  -- 	SHIFT  1           ; double the differential
           0F3 : 1105;  -- 	STORE  CMAErr
           0F4 : 0907;  -- 	LOAD   CMAR
           0F5 : 2106;  -- 	SUB    CMAL        ; calculate the actual differential
           0F6 : 2105;  -- 	SUB    CMAErr      ; should be 0 if nothing got capped
           0F7 : 4100;  -- 	JZERO  CMADone
           0F8 : 1105;  -- 	STORE  CMAErr      ; the missing part
           0F9 : 1906;  -- 	ADD    CMAL
           0FA : 810F;  -- 	CALL   CapValue
           0FB : 1106;  -- 	STORE  CMAL
           0FC : 0907;  -- 	LOAD   CMAR
           0FD : 2105;  -- 	SUB    CMAErr
           0FE : 810F;  -- 	CALL   CapValue
           0FF : 1107;  -- 	STORE  CMAR
           100 : 0906;  -- 	LOAD   CMAL
           101 : 9883;  -- 	OUT    LVELCMD
           102 : 0907;  -- 	LOAD   CMAR
           103 : 988B;  -- 	OUT    RVELCMD
           104 : 8800;  -- 	RETURN
           105 : 0000;  -- 	CMAErr: DW 0       ; holds angle error velocity
           106 : 0000;  -- 	CMAL:    DW 0      ; holds temp left velocity
           107 : 0000;  -- 	CMAR:    DW 0      ; holds temp right velocity
           108 : 90C2;  -- 	IN     THETA
           109 : 20D9;  -- 	SUB    DTheta      ; actual - desired angle
           10A : 8123;  -- 	CALL   Neg         ; desired - actual angle
           10B : 68B4;  -- 	ADDI   180
           10C : 811C;  -- 	CALL   Mod360
           10D : 6F4C;  -- 	ADDI   -180
           10E : 8800;  -- 	RETURN
           10F : 211B;  -- 	SUB     MaxVal
           110 : 3916;  -- 	JPOS    CapVelHigh
           111 : 191B;  -- 	ADD     MaxVal
           112 : 191B;  -- 	ADD     MaxVal
           113 : 3118;  -- 	JNEG    CapVelLow
           114 : 211B;  -- 	SUB     MaxVal
           115 : 8800;  -- 	RETURN
           116 : 091B;  -- 	LOAD    MaxVal
           117 : 8800;  -- 	RETURN
           118 : 091B;  -- 	LOAD    MaxVal
           119 : 8123;  -- 	CALL    Neg
           11A : 8800;  -- 	RETURN
           11B : 01FE;  -- 	MaxVal: DW 510
           11C : 311F;  -- 	JNEG   M360N
           11D : 6E98;  -- 	ADDI   -360
           11E : 291C;  -- 	JUMP   Mod360
           11F : 6968;  -- 	ADDI   360
           120 : 311F;  -- 	JNEG   M360N
           121 : 8800;  -- 	RETURN
           122 : 3925;  -- 	JPOS   Abs_r
           123 : 5A5E;  -- 	XOR    NegOne       ; Flip all bits
           124 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           125 : 8800;  -- 	RETURN
           126 : 0986;  -- 	LOAD   AtanY
           127 : 8122;  -- 	CALL   Abs          ; abs(y)
           128 : 1188;  -- 	STORE  AtanT
           129 : 0985;  -- 	LOAD   AtanX        ; abs(x)
           12A : 8122;  -- 	CALL   Abs
           12B : 2188;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           12C : 3137;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           12D : 0985;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           12E : 3134;  -- 	JNEG   A2_R3
           12F : 8146;  -- 	CALL   A2_calc      ; Octants 1, 8
           130 : 3132;  -- 	JNEG   A2_R1n
           131 : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           132 : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           133 : 8800;  -- 	RETURN
           134 : 8146;  -- 	CALL   A2_calc      ; Octants 4, 5
           135 : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           136 : 8800;  -- 	RETURN
           137 : 0986;  -- 	LOAD   AtanY        ; Swap input arguments
           138 : 1188;  -- 	STORE  AtanT
           139 : 0985;  -- 	LOAD   AtanX
           13A : 1186;  -- 	STORE  AtanY
           13B : 0988;  -- 	LOAD   AtanT
           13C : 1185;  -- 	STORE  AtanX
           13D : 3942;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           13E : 8146;  -- 	CALL   A2_calc      ; else octants 6, 7
           13F : 8123;  -- 	CALL   Neg          ; Negatge the number
           140 : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           141 : 8800;  -- 	RETURN
           142 : 8146;  -- 	CALL   A2_calc      ; Octants 2, 3
           143 : 8123;  -- 	CALL   Neg          ; negate the angle
           144 : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           145 : 8800;  -- 	RETURN
           146 : 0986;  -- 	LOAD   AtanY
           147 : 11E5;  -- 	STORE  d16sN        ; Y in numerator
           148 : 0985;  -- 	LOAD   AtanX
           149 : 11E6;  -- 	STORE  d16sD        ; X in denominator
           14A : 8172;  -- 	CALL   A2_div       ; divide
           14B : 09EB;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           14C : 1187;  -- 	STORE  AtanRatio
           14D : 11AE;  -- 	STORE  m16sA
           14E : 11AF;  -- 	STORE  m16sB
           14F : 8169;  -- 	CALL   A2_mult      ; X^2
           150 : 11AE;  -- 	STORE  m16sA
           151 : 0989;  -- 	LOAD   A2c
           152 : 11AF;  -- 	STORE  m16sB
           153 : 8169;  -- 	CALL   A2_mult
           154 : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           155 : 11E6;  -- 	STORE  d16sD
           156 : 0987;  -- 	LOAD   AtanRatio
           157 : 11E5;  -- 	STORE  d16sN        ; Ratio in numerator
           158 : 8172;  -- 	CALL   A2_div       ; divide
           159 : 09EB;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           15A : 11AE;  -- 	STORE  m16sA        ; <= result in radians
           15B : 098A;  -- 	LOAD   A2cd         ; degree conversion factor
           15C : 11AF;  -- 	STORE  m16sB
           15D : 8169;  -- 	CALL   A2_mult      ; convert to degrees
           15E : 1188;  -- 	STORE  AtanT
           15F : 6017;  -- 	SHIFT  -7           ; check 7th bit
           160 : 4A60;  -- 	AND    One
           161 : 4166;  -- 	JZERO  A2_rdwn      ; round down
           162 : 0988;  -- 	LOAD   AtanT
           163 : 6018;  -- 	SHIFT  -8
           164 : 6801;  -- 	ADDI   1            ; round up
           165 : 8800;  -- 	RETURN
           166 : 0988;  -- 	LOAD   AtanT
           167 : 6018;  -- 	SHIFT  -8           ; round down
           168 : 8800;  -- 	RETURN
           169 : 818B;  -- 	CALL   Mult16s
           16A : 09B3;  -- 	LOAD   mres16sH
           16B : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           16C : 11B3;  -- 	STORE  mres16sH
           16D : 09B2;  -- 	LOAD   mres16sL
           16E : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           16F : 4A76;  -- 	AND    LowByte
           170 : 51B3;  -- 	OR     mres16sH     ; combine high and low words of result
           171 : 8800;  -- 	RETURN
           172 : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           173 : 1188;  -- 	STORE  AtanT
           174 : 0988;  -- 	LOAD   AtanT
           175 : 6FFF;  -- 	ADDI   -1
           176 : 3979;  -- 	JPOS   A2_DN        ; not done; continue shifting
           177 : 81B4;  -- 	CALL   Div16s       ; do the standard division
           178 : 8800;  -- 	RETURN
           179 : 1188;  -- 	STORE  AtanT
           17A : 09E5;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           17B : 6001;  -- 	SHIFT  1
           17C : 59E5;  -- 	XOR    d16sN        ; if the sign changed,
           17D : 3181;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           17E : 59E5;  -- 	XOR    d16sN        ; get back shifted version
           17F : 11E5;  -- 	STORE  d16sN
           180 : 2974;  -- 	JUMP   A2_DL
           181 : 09E6;  -- 	LOAD   d16sD
           182 : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           183 : 11E6;  -- 	STORE  d16sD
           184 : 2974;  -- 	JUMP   A2_DL
           185 : 0000;  -- AtanX:      DW 0
           186 : 0000;  -- AtanY:      DW 0
           187 : 0000;  -- AtanRatio:  DW 0        ; =y/x
           188 : 0000;  -- AtanT:      DW 0        ; temporary value
           189 : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           18A : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           18B : B800;  -- 	LOADI  0
           18C : 11B0;  -- 	STORE  m16sc        ; clear carry
           18D : 11B3;  -- 	STORE  mres16sH     ; clear result
           18E : B810;  -- 	LOADI  16           ; load 16 to counter
           18F : 11B1;  -- 	STORE  mcnt16s
           190 : 09B0;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           191 : 4195;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           192 : 09B3;  -- 	LOAD   mres16sH     ; if a carry,
           193 : 19AE;  -- 	ADD    m16sA        ;  add multiplicand to result H
           194 : 11B3;  -- 	STORE  mres16sH
           195 : 09AF;  -- 	LOAD   m16sB
           196 : 4A60;  -- 	AND    One          ; check bit 0 of multiplier
           197 : 11B0;  -- 	STORE  m16sc        ; save as next carry
           198 : 419C;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           199 : 09B3;  -- 	LOAD   mres16sH     ; if bit 0 set,
           19A : 21AE;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           19B : 11B3;  -- 	STORE  mres16sH
           19C : 09AF;  -- 	LOAD   m16sB
           19D : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           19E : 49AD;  -- 	AND    c7FFF        ; clear msb
           19F : 11AF;  -- 	STORE  m16sB
           1A0 : 09B3;  -- 	LOAD   mres16sH     ; load result H
           1A1 : 600F;  -- 	SHIFT  15           ; move lsb to msb
           1A2 : 51AF;  -- 	OR     m16sB
           1A3 : 11AF;  -- 	STORE  m16sB        ; result L now includes carry out from H
           1A4 : 09B3;  -- 	LOAD   mres16sH
           1A5 : 6011;  -- 	SHIFT  -1
           1A6 : 11B3;  -- 	STORE  mres16sH     ; shift result H >>1
           1A7 : 09B1;  -- 	LOAD   mcnt16s
           1A8 : 6FFF;  -- 	ADDI   -1           ; check counter
           1A9 : 398F;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           1AA : 09AF;  -- 	LOAD   m16sB
           1AB : 11B2;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           1AC : 8800;  -- 	RETURN              ; Done
           1AD : 7FFF;  -- c7FFF: DW &H7FFF
           1AE : 0000;  -- m16sA: DW 0 ; multiplicand
           1AF : 0000;  -- m16sB: DW 0 ; multipler
           1B0 : 0000;  -- m16sc: DW 0 ; carry
           1B1 : 0000;  -- mcnt16s: DW 0 ; counter
           1B2 : 0000;  -- mres16sL: DW 0 ; result low
           1B3 : 0000;  -- mres16sH: DW 0 ; result high
           1B4 : B800;  -- 	LOADI  0
           1B5 : 11EC;  -- 	STORE  dres16sR     ; clear remainder result
           1B6 : 11E9;  -- 	STORE  d16sC1       ; clear carry
           1B7 : 09E5;  -- 	LOAD   d16sN
           1B8 : 59E6;  -- 	XOR    d16sD
           1B9 : 11E7;  -- 	STORE  d16sS        ; sign determination = N XOR D
           1BA : B811;  -- 	LOADI  17
           1BB : 11E8;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           1BC : 09E6;  -- 	LOAD   d16sD
           1BD : 8122;  -- 	CALL   Abs          ; take absolute value of denominator
           1BE : 11E6;  -- 	STORE  d16sD
           1BF : 09E5;  -- 	LOAD   d16sN
           1C0 : 8122;  -- 	CALL   Abs          ; take absolute value of numerator
           1C1 : 11E5;  -- 	STORE  d16sN
           1C2 : 09E5;  -- 	LOAD   d16sN
           1C3 : 601F;  -- 	SHIFT  -15          ; get msb
           1C4 : 4A60;  -- 	AND    One          ; only msb (because shift is arithmetic)
           1C5 : 11EA;  -- 	STORE  d16sC2       ; store as carry
           1C6 : 09E5;  -- 	LOAD   d16sN
           1C7 : 6001;  -- 	SHIFT  1            ; shift <<1
           1C8 : 51E9;  -- 	OR     d16sC1       ; with carry
           1C9 : 11E5;  -- 	STORE  d16sN
           1CA : 09E8;  -- 	LOAD   d16sT
           1CB : 6FFF;  -- 	ADDI   -1           ; decrement counter
           1CC : 41DC;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           1CD : 11E8;  -- 	STORE  d16sT
           1CE : 09EC;  -- 	LOAD   dres16sR
           1CF : 6001;  -- 	SHIFT  1            ; shift remainder
           1D0 : 51EA;  -- 	OR     d16sC2       ; with carry from other shift
           1D1 : 21E6;  -- 	SUB    d16sD        ; subtract denominator from remainder
           1D2 : 31D7;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           1D3 : 11EC;  -- 	STORE  dres16sR
           1D4 : B801;  -- 	LOADI  1
           1D5 : 11E9;  -- 	STORE  d16sC1       ; set carry
           1D6 : 29C2;  -- 	JUMP   Div16s_loop
           1D7 : 19E6;  -- 	ADD    d16sD        ; add denominator back in
           1D8 : 11EC;  -- 	STORE  dres16sR
           1D9 : B800;  -- 	LOADI  0
           1DA : 11E9;  -- 	STORE  d16sC1       ; clear carry
           1DB : 29C2;  -- 	JUMP   Div16s_loop
           1DC : 09E5;  -- 	LOAD   d16sN
           1DD : 11EB;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           1DE : 09E7;  -- 	LOAD   d16sS        ; check the sign indicator
           1DF : 31E1;  -- 	JNEG   Div16s_neg
           1E0 : 8800;  -- 	RETURN
           1E1 : 09EB;  -- 	LOAD   dres16sQ     ; need to negate the result
           1E2 : 8123;  -- 	CALL   Neg
           1E3 : 11EB;  -- 	STORE  dres16sQ
           1E4 : 8800;  -- 	RETURN
           1E5 : 0000;  -- d16sN: DW 0 ; numerator
           1E6 : 0000;  -- d16sD: DW 0 ; denominator
           1E7 : 0000;  -- d16sS: DW 0 ; sign value
           1E8 : 0000;  -- d16sT: DW 0 ; temp counter
           1E9 : 0000;  -- d16sC1: DW 0 ; carry value
           1EA : 0000;  -- d16sC2: DW 0 ; carry value
           1EB : 0000;  -- dres16sQ: DW 0 ; quotient result
           1EC : 0000;  -- dres16sR: DW 0 ; remainder result
           1ED : 0A17;  -- 	LOAD   L2X
           1EE : 8122;  -- 	CALL   Abs
           1EF : 1219;  -- 	STORE  L2T1
           1F0 : 0A18;  -- 	LOAD   L2Y
           1F1 : 8122;  -- 	CALL   Abs
           1F2 : 2219;  -- 	SUB    L2T1
           1F3 : 320F;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           1F4 : 1A19;  -- 	ADD    L2T1
           1F5 : 11AE;  -- 	STORE  m16sa
           1F6 : B8F6;  -- 	LOADI  246       ; max * 246
           1F7 : 11AF;  -- 	STORE  m16sB
           1F8 : 818B;  -- 	CALL   Mult16s
           1F9 : 09B3;  -- 	LOAD   mres16sH
           1FA : 6008;  -- 	SHIFT  8
           1FB : 121A;  -- 	STORE  L2T2
           1FC : 09B2;  -- 	LOAD   mres16sL
           1FD : 6018;  -- 	SHIFT  -8        ; / 256
           1FE : 4A76;  -- 	AND    LowByte
           1FF : 521A;  -- 	OR     L2T2
           200 : 121B;  -- 	STORE  L2T3
           201 : 0A19;  -- 	LOAD   L2T1
           202 : 11AE;  -- 	STORE  m16sa
           203 : B868;  -- 	LOADI  104       ; min * 104
           204 : 11AF;  -- 	STORE  m16sB
           205 : 818B;  -- 	CALL   Mult16s
           206 : 09B3;  -- 	LOAD   mres16sH
           207 : 6008;  -- 	SHIFT  8
           208 : 121A;  -- 	STORE  L2T2
           209 : 09B2;  -- 	LOAD   mres16sL
           20A : 6018;  -- 	SHIFT  -8        ; / 256
           20B : 4A76;  -- 	AND    LowByte
           20C : 521A;  -- 	OR     L2T2
           20D : 1A1B;  -- 	ADD    L2T3     ; sum
           20E : 8800;  -- 	RETURN
           20F : 1A19;  -- 	ADD    L2T1
           210 : 121A;  -- 	STORE  L2T2
           211 : 0A19;  -- 	LOAD   L2T1
           212 : 121B;  -- 	STORE  L2T3
           213 : 0A1A;  -- 	LOAD   L2T2
           214 : 1219;  -- 	STORE  L2T1
           215 : 0A1B;  -- 	LOAD   L2T3
           216 : 29F5;  -- 	JUMP   CalcDist
           217 : 0000;  -- L2X:  DW 0
           218 : 0000;  -- L2Y:  DW 0
           219 : 0000;  -- L2T1: DW 0
           21A : 0000;  -- L2T2: DW 0
           21B : 0000;  -- L2T3: DW 0
           21C : 9802;  -- 	OUT    TIMER
           21D : 9002;  -- 	IN     TIMER
           21E : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           21F : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           220 : 321D;  -- 	JNEG   Wloop
           221 : 8800;  -- 	RETURN
           222 : 823A;  -- 	CALL   GetBattLvl
           223 : 4222;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           224 : 2288;  -- 	SUB    MinBatt
           225 : 3228;  -- 	JNEG   DeadBatt
           226 : 1A88;  -- 	ADD    MinBatt     ; get original value back
           227 : 8800;  -- 	RETURN
           228 : B820;  -- 	LOADI  &H20
           229 : 980A;  -- 	OUT    BEEP        ; start beep sound
           22A : 823A;  -- 	CALL   GetBattLvl  ; get the battery level
           22B : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           22C : 9805;  -- 	OUT    SSEG2
           22D : 9806;  -- 	OUT    LCD
           22E : 0A5F;  -- 	LOAD   Zero
           22F : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           230 : 9801;  -- 	OUT    LEDS        ; all LEDs on
           231 : 9807;  -- 	OUT    XLEDS
           232 : 821C;  -- 	CALL   Wait1       ; 1 second
           233 : B940;  -- 	LOADI  &H140       ; short, high-pitched beep
           234 : 980A;  -- 	OUT    BEEP        ; stop beeping
           235 : 0A5F;  -- 	LOAD   Zero
           236 : 9801;  -- 	OUT    LEDS        ; LEDs off
           237 : 9807;  -- 	OUT    XLEDS
           238 : 821C;  -- 	CALL   Wait1       ; 1 second
           239 : 2A28;  -- 	JUMP   DeadBatt    ; repeat forever
           23A : 0A8A;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           23B : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           23C : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           23D : 8248;  -- 	CALL   BlockI2C    ; wait for it to finish
           23E : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           23F : 8800;  -- 	RETURN
           240 : 8248;  -- 	CALL   BlockI2C    ; wait for idle
           241 : 0A89;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           242 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           243 : 0A5F;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           244 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           245 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           246 : 8248;  -- 	CALL   BlockI2C    ; wait for it to finish
           247 : 8800;  -- 	RETURN
           248 : 0A5F;  -- 	LOAD   Zero
           249 : 1256;  -- 	STORE  Temp        ; Used to check for timeout
           24A : 0A56;  -- 	LOAD   Temp
           24B : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           24C : 1256;  -- 	STORE  Temp
           24D : 4251;  -- 	JZERO  I2CError    ; Timeout occurred; error
           24E : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           24F : 3A4A;  -- 	JPOS   BI2CL       ; If not 0, try again
           250 : 8800;  -- 	RETURN             ; Else return
           251 : 0A5F;  -- 	LOAD   Zero
           252 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           253 : 9804;  -- 	OUT    SSEG1
           254 : 9805;  -- 	OUT    SSEG2       ; display error message
           255 : 2A51;  -- 	JUMP   I2CError
           256 : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be useful
           257 : 0000;  -- CThresh:  DW 0 ; Close threshold, how close we can get to the wall
           258 : 0000;  -- FThresh:  DW 0 ; Far threshold, how far we can get from the wall	
           259 : 0000;  -- Thresh:	  DW 0 ; Single threshold for staying in a line
           25A : 0000;  -- AdjAng:   DW 0 ; Angle by which to adjust if we get too close or too far from the wall
           25B : 0000;  -- Leg:	  DW 0 ; Represents current state
           25C : 0000;  -- PrevDist: DW 0 ; Used for alignment with the wall
           25D : 0000;  -- SonarVal: DW 0 ; We store the sonar value here after it has been captured
           25E : FFFF;  -- NegOne:   DW -1
           25F : 0000;  -- Zero:     DW 0
           260 : 0001;  -- One:      DW 1
           261 : 0002;  -- Two:      DW 2
           262 : 0003;  -- Three:    DW 3
           263 : 0004;  -- Four:     DW 4
           264 : 0005;  -- Five:     DW 5
           265 : 0006;  -- Six:      DW 6
           266 : 0007;  -- Seven:    DW 7
           267 : 0008;  -- Eight:    DW 8
           268 : 0009;  -- Nine:     DW 9
           269 : 000A;  -- Ten:      DW 10
           26A : 0001;  -- BlueF:    DW 1
           26B : 0002;  -- BlueB:    DW 2
           26C : 0003;  -- WhiteF:   DW 3
           26D : 0004;  -- WhiteB:   DW 4
           26E : 0001;  -- Mask0:    DW &B00000001
           26F : 0002;  -- Mask1:    DW &B00000010
           270 : 0004;  -- Mask2:    DW &B00000100
           271 : 0008;  -- Mask3:    DW &B00001000
           272 : 0010;  -- Mask4:    DW &B00010000
           273 : 0020;  -- Mask5:    DW &B00100000
           274 : 0040;  -- Mask6:    DW &B01000000
           275 : 0080;  -- Mask7:    DW &B10000000
           276 : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           277 : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           278 : 000C;  -- Mask23:	  DW &B00001100
           279 : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           27A : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           27B : 024A;  -- Ft2:      DW 586       ; ~2ft in 1.04mm units
           27C : 036F;  -- Ft3:      DW 879
           27D : 0494;  -- Ft4:      DW 1172
           27E : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           27F : 00B4;  -- Deg180:   DW 180       ; 180
           280 : 010E;  -- Deg270:   DW 270       ; 270
           281 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           282 : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           283 : FF9C;  -- RSlow:    DW -100
           284 : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           285 : FEA2;  -- RMid:     DW -350
           286 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           287 : FE0C;  -- RFast:    DW -500
           288 : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           289 : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           28A : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
           28B : 0000;  -- 	DW 0
  END;
